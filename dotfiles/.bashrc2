export DOTHOME=$(dirname ${BASH_SOURCE[0]})
source $DOTHOME/.shell_alias
source $DOTHOME/.git_alias

# GPG Yubikey
if [[ -d $HOME/.gnupg && $UID != 0 ]]; then
  export GPG_TTY="$(tty)"
  export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
  gpg-connect-agent updatestartuptty /bye > /dev/null
fi

# GDB
export DEBUGINFOD_MAX_UNUSED_AGE_S=986400


# append to the history file, don't overwrite it
shopt -s histappend
HISTSIZE=1000
HISTFILESIZE=2000
HISTCONTROL=ignoreboth
mkdir -p ~/.bash_history.d

export LESS=-RXIF
export SYSTEMD_LESS="FRXMK" 

# check the window size after each command and, if necessary, update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Enable lesspipe
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

if [ -t 0 ]; then
if [[ "$-" =~ "i" ]]; then
	bind '"\e[H"':"beginning-of-line"
  bind '"\e[1~"':"beginning-of-line"
	bind '"\e[F"':"end-of-line"
  bind '"\e[4~"':"end-of-line"
	bind '"\e\e[D"':"backward-word"
	bind '"\e\e[C"':"forward-word"
	bind '"\e[1;5D"':"backward-word"
	bind '"\e[1;5C"':"forward-word"
	bind '"\e[3;5~"':"kill-word"
	# "backward-kill-word" is 0x17 (ctrl-w), Ubuntu uses ~/.inputrc
  stty -ixon >/dev/null 2>&1
fi
fi

export EDITOR=vi
export HOST=${HOST-$(hostname)}
export HOSTCOLOR="$COLOR_ORANGE"
[ -e $HOME/.hostcolor ] && export HOSTCOLOR="$(head -1 $HOME/.hostcolor)"

function prependPath() { export PATH=$1:$PATH; makePathUnique; }
function appendPath() { export PATH=$PATH:$1; makePathUnique; }
function makePathUnique() { PATH=$(echo $PATH | tr ':' '\n' | awk '!seen[$0]++' | tr '\n' ':'); }

appendPath ~/.local/bin
appendPath ~/qbm/core/build

# Rust
if [[ -d $HOME/.cargo ]]; then
  appendPath $HOME/.cargo/bin
  source $HOME/.cargo/env 
fi

# Go
if [[ -d $HOME/go/bin ]]; then
  appendPath $HOME/go/bin
fi

if [[ $USER == root ]]; then
  USER_COLOR=$COLOR_RED
elif [[ $USER == "ec2-user" ]]; then
  USER_COLOR=${COLOR_ORANGE}
else
  USER_COLOR=${COLOR_BGREEN}
fi

export _ts_bashrc=$(stat -c%Y ~/.bashrc)
export _ts_bashrc2=$(stat -c%Y ~/.bashrc2)

function reloadTmuxUID {
  now=$(date +%s)
  if [[ $now -gt $_ts_tmux ]]; then
    #export TMUX_UID=$(tmux display-message -p '#S.#I.#P' 2>/dev/null || true)
    export TMUX_UID=$(tty | cut -d/ -f4)
    export _ts_tmux=$(($now+86400))
    export HISTFILE="$HOME/.bash_history.d/t.${TMUX_UID}"
    echo "HISTFILE=$HISTFILE"
    history -r
  fi
}
function reloadBashRC {
    if [[ $(stat -c%Y ~/.bashrc2) != $_ts_bashrc2 || $(stat -c%Y ~/.bashrc) != $_ts_bashrc ]]; then
        source ~/.bashrc
        [ ! -z $_ts_bashrc2 ] && echo "Reloaded" >&2
        export _ts_bashrc=$(stat -c%Y ~/.bashrc)
        export _ts_bashrc2=$(stat -c%Y ~/.bashrc2)
    fi
}
function updatePS1 {
    EXITCODE=$?
    [ $EXITCODE != 0 ] && EXIT_SUFFIX=":${COLOR_RED}$EXITCODE${COLOR_NONE}" || EXIT_SUFFIX="${COLOR_NONE}";
    PS1="${USER_COLOR}\u${COLOR_NONE}@${HOSTCOLOR}\h ${COLOR_BLUE}\W${EXIT_SUFFIX}\n$ "
}
export PROMPT_COMMAND="updatePS1; history -a; reloadBashRC; reloadTmuxUID"

if [[ $UID == 0 ]]; then
  # Root user, simpler setup
  alias rm='rm -i'
  alias cp='cp -i'
  alias mv='mv -i'
else
  if [[ -e $HOME/.pyenv ]]; then
    export PYENV_ROOT="$HOME/.pyenv"
    command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
  fi

# disable middle button
# xinput set-button-map 11 1 1 3 4 5 6 7

alias b='build-run build'
alias r='build-run run'
alias n='ninja-root-build'
alias t='build-run test'
alias c='build-run check'

export NINJA_STATUS='[%f/%t+%r] '
export CCACHE_DIR=$HOME/.ccache
mkdir -p $CCACHE_DIR

fi # UID != 0

